package com.skillstorm.week1.day5;

import java.util.concurrent.LinkedBlockingQueue;

/*
 * Thread states
 * 
 * 1. NEW (Created, but not yet started new Thread())
 * 2. RUNNABLE (Thread has started, but is eligible to be given control)
 * 3. BLOCKED (Thread is waiting on some mutex/lock before continuing)
 * 4. WAITING (join(). Thread waiting indefinitely)
 * 5. TIMED_WAITING (join(1000). Wait, but after 1000 seconds give up if it isn't done yet)
 * 6. TERMINATED (Thread has finished execution)
 */

// ProducerConsumer is a way of having two separate threads working in tandem
public class ProducerConsumer {

	public static void main(String[] args) {
		
	}
}

class Chef implements Runnable {

	// When a chef completes cooking, add the item to the expo
	LinkedBlockingQueue<String> expo; 
	private String name;
	private String dish;
	private int cookTime;
	
	@Override
	public void run() {
		// TODO Auto-generated method stub
		
	}
	
}

class Waiter implements Runnable {

	LinkedBlockingQueue<String> expo;
	private String name;
	private int deliveryTime;
	
	@Override
	public void run() {
		// TODO Auto-generated method stub
		
	}
	
}
