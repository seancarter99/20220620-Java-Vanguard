package com.skillstorm.week1.day1;

// Classes are blueprints for creating objects
// Classes outline the behaviors and properties of a real world object
// Objects are specific "instances" of our classes

/*
 * 4 Pillars of OOP
 * 
 * 1. Encapsulation
 *    - The process of data hiding in order to protect certain values. Typically via getters/setters
 */
public class Dog {

	/*
	 * Access modifiers
	 * 
	 * public - Accessible ANYWHERE
	 * private - Accessible only within the class definition itself
	 * protected - Accessible anywhere within the same package OR any class that inherits from another
	 * default (package private) - Accessible anywhere within the same package
	 * 
	 * Least access -------------- Most access
	 * private -> default -> protected -> public
	 */
	
	// To fully encapsulate a class, standard convention says to make the field private and create a public getter/setter
	
	private String name;
	private short age; // A dog has an age property of type short
	private String owner;
	private String breed;
	private static int dogPopulation;
	// Static properties are shared between ALL dog objects
	// Static does NOT belong to the object, but rather the class
	
	// If I don't a constructor for a class, Java will provide one for me
	// This is known as a "default constructor". It takes no arguments
	Dog() { // This is essentially a "default constructor" IN EVERYTHING BUT NAME
		dogPopulation++;
	}
	
	// Defining my own constructor
	// Constructors are good for initializing values when creating an object
	Dog(String name, short age, String owner, String breed) {
		// Use this keyword to assign properties to the dog
		// this refers to the dog that I just created
		this.name = name;
		this.age = age;
		this.owner = owner;
		this.breed = breed;
		dogPopulation++;
	}
	
	// Overloaded constructor without breed as a parameter
	Dog(String name, short age, String owner) {
		this.name = name;
		this.age = age;
		this.owner = owner;
		dogPopulation++;
	}
	
	// Syntax for getter: get + the variable name with the first letter capitalized
	// public, returns a String, no parameters for this method
	public String getName() {
		return this.name; // Return the name of the dog
	}
	
	// Syntax for setter: set + the variable name with the first letter capitalized
	// public, void, setName, parameter will be a String representing the new dog name
	public void setName() { // Changes the name of a given dog
		
	}
	
	public static void main(String[] args) {
		System.out.println("Total Dog Population before dog creation: " + dogPopulation);
		Dog levi = new Dog("Levi", (short) 1, "Sean"); // invokes the Dog constructor of String, short, String
		System.out.println(levi.name);
		Dog lucy = new Dog("Lucy", (short) 7, "Sean");
		System.out.println("Lucy Name: " + lucy.name);
		System.out.println("Levi Name: " + levi.name);
		
		System.out.println("Total Dog Population after dog creation: " + dogPopulation);
		
	}
}
